import groovy.json.JsonSlurper
import groovy.json.JsonOutput

project.ext.ASSET_DIR = projectDir.toString() + '/src/main/assets'

task downloadModelFile(type: Download) {
    src 'https://storage.googleapis.com/download.tensorflow.org/models/tflite/task_library/object_detection/android/lite-model_ssd_mobilenet_v1_1_metadata_2.tflite'
    dest project.ext.ASSET_DIR + '/mobilenetv1.tflite'
    overwrite false
}

task downloadModelFile0(type: Download) {
    src 'https://storage.googleapis.com/download.tensorflow.org/models/tflite/task_library/object_detection/android/lite-model_efficientdet_lite0_detection_metadata_1.tflite'
    dest project.ext.ASSET_DIR + '/efficientdet-lite0.tflite'
    overwrite false
}

task downloadModelFile1(type: Download) {
    src 'https://storage.googleapis.com/download.tensorflow.org/models/tflite/task_library/object_detection/android/lite-model_efficientdet_lite1_detection_metadata_1.tflite'
    dest project.ext.ASSET_DIR + '/efficientdet-lite1.tflite'
    overwrite false
}

task downloadModelFile2(type: Download) {
    src 'https://storage.googleapis.com/download.tensorflow.org/models/tflite/task_library/object_detection/android/lite-model_efficientdet_lite2_detection_metadata_1.tflite'
    dest project.ext.ASSET_DIR + '/efficientdet-lite2.tflite'
    overwrite false
}

def String getAssetID(String token, String owner, String repo, String tag_name, String asset_name){
    def jsonFile = new ByteArrayOutputStream()
    String path = "https://api.github.com/repos/${owner}/${repo}/releases".toString()
    def asset_info
    def asset_id
    exec {
        commandLine 'curl', '-L', '-H', 'Accept: application/vnd.github+json', '-H', "Authorization: token $token", '-H', 'X-GitHub-Api-Version: 2022-11-28', path

        standardOutput = jsonFile
    }
    def jsonContent = new JsonSlurper().parseText(jsonFile.toString())
    def release_info = null
    for (def obj : jsonContent) {
        if (obj.tag_name == tag_name) {
            release_info = obj
            def assets
            if (release_info != null) {
                assets = release_info.assets
//                    println("assets: $assets")
                if (assets != null) {
                    for (def asset : assets) {
                        if (asset.name == asset_name) {
                            asset_info = asset
                            println("found asset $asset_name")
                            break
                        }
                    }
                    if (asset_info != null){
                        asset_id = asset_info.id
                        println("asset_id: " + asset_id)
                        return asset_id
                    }else {
                        println "Asset with $asset_name not found"
                    }
                } else {
                    println "Release with tag $tag_name has no assets"
                }
            } else {
                println "Release with tag $tag_name not found"
            }
            break
        }
    }
}

task downloadModelFileRobot(type: Download) {
    doFirst{
        String token = System.getenv("GITHUB_TOKEN")
        String owner = 'oist'
        String repo = 'smartphone_robot_object_detection'
        String tag_name="0.1.1"
        String asset_name = "model.tflite"
        String asset_id = getAssetID(token, owner, repo, tag_name, asset_name)
        println("asset_id: " + asset_id)
        header 'Authorization', 'token ' + System.getenv("GITHUB_TOKEN")
        src "https://api.github.com/repos/$owner/$repo/releases/assets/$asset_id"
        dest project.ext.ASSET_DIR + '/model.tflite'
        overwrite false
    }
}

preBuild.dependsOn downloadModelFile, downloadModelFile0, downloadModelFile1, downloadModelFile2, downloadModelFileRobot