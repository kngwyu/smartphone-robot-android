// automatically generated by the FlatBuffers compiler, do not modify

package jp.oist.abcvlib.core.learning.fbclasses;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class WheelCounts extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static WheelCounts getRootAsWheelCounts(ByteBuffer _bb) { return getRootAsWheelCounts(_bb, new WheelCounts()); }
  public static WheelCounts getRootAsWheelCounts(ByteBuffer _bb, WheelCounts obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public WheelCounts __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long timestamps(int j) { int o = __offset(4); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int timestampsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public LongVector timestampsVector() { return timestampsVector(new LongVector()); }
  public LongVector timestampsVector(LongVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer timestampsAsByteBuffer() { return __vector_as_bytebuffer(4, 8); }
  public ByteBuffer timestampsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 8); }
  public double left(int j) { int o = __offset(6); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int leftLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector leftVector() { return leftVector(new DoubleVector()); }
  public DoubleVector leftVector(DoubleVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer leftAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public ByteBuffer leftInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 8); }
  public double right(int j) { int o = __offset(8); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int rightLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector rightVector() { return rightVector(new DoubleVector()); }
  public DoubleVector rightVector(DoubleVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer rightAsByteBuffer() { return __vector_as_bytebuffer(8, 8); }
  public ByteBuffer rightInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 8); }

  public static int createWheelCounts(FlatBufferBuilder builder,
      int timestampsOffset,
      int leftOffset,
      int rightOffset) {
    builder.startTable(3);
    WheelCounts.addRight(builder, rightOffset);
    WheelCounts.addLeft(builder, leftOffset);
    WheelCounts.addTimestamps(builder, timestampsOffset);
    return WheelCounts.endWheelCounts(builder);
  }

  public static void startWheelCounts(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addTimestamps(FlatBufferBuilder builder, int timestampsOffset) { builder.addOffset(0, timestampsOffset, 0); }
  public static int createTimestampsVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startTimestampsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addLeft(FlatBufferBuilder builder, int leftOffset) { builder.addOffset(1, leftOffset, 0); }
  public static int createLeftVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startLeftVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addRight(FlatBufferBuilder builder, int rightOffset) { builder.addOffset(2, rightOffset, 0); }
  public static int createRightVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startRightVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endWheelCounts(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public WheelCounts get(int j) { return get(new WheelCounts(), j); }
    public WheelCounts get(WheelCounts obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

