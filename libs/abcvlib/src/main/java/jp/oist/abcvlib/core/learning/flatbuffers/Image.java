// automatically generated by the FlatBuffers compiler, do not modify

package jp.oist.abcvlib.core.learning.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Image extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Image getRootAsImage(ByteBuffer _bb) { return getRootAsImage(_bb, new Image()); }
  public static Image getRootAsImage(ByteBuffer _bb, Image obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Image __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long timestamp() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public jp.oist.abcvlib.core.learning.flatbuffers.Pixels pixels(int j) { return pixels(new jp.oist.abcvlib.core.learning.flatbuffers.Pixels(), j); }
  public jp.oist.abcvlib.core.learning.flatbuffers.Pixels pixels(jp.oist.abcvlib.core.learning.flatbuffers.Pixels obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int pixelsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public jp.oist.abcvlib.core.learning.flatbuffers.Pixels.Vector pixelsVector() { return pixelsVector(new jp.oist.abcvlib.core.learning.flatbuffers.Pixels.Vector()); }
  public jp.oist.abcvlib.core.learning.flatbuffers.Pixels.Vector pixelsVector(jp.oist.abcvlib.core.learning.flatbuffers.Pixels.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int width() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int height() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createImage(FlatBufferBuilder builder,
      long timestamp,
      int pixelsOffset,
      int width,
      int height) {
    builder.startTable(4);
    Image.addTimestamp(builder, timestamp);
    Image.addHeight(builder, height);
    Image.addWidth(builder, width);
    Image.addPixels(builder, pixelsOffset);
    return Image.endImage(builder);
  }

  public static void startImage(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(0, timestamp, 0L); }
  public static void addPixels(FlatBufferBuilder builder, int pixelsOffset) { builder.addOffset(1, pixelsOffset, 0); }
  public static int createPixelsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPixelsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addWidth(FlatBufferBuilder builder, int width) { builder.addInt(2, width, 0); }
  public static void addHeight(FlatBufferBuilder builder, int height) { builder.addInt(3, height, 0); }
  public static int endImage(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Image get(int j) { return get(new Image(), j); }
    public Image get(Image obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

