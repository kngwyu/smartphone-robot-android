import groovy.json.JsonSlurper

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.1'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.21' // needed for YuvToRgbConverter
        classpath 'de.undercouch:gradle-download-task:5.3.1'
    }
}

allprojects {
    def jsonFile = file("$rootDir/config.json")
    def pythonconfig = new JsonSlurper().parseText(jsonFile.text)
    ext.host = pythonconfig.DEFAULT.host
    ext.port = pythonconfig.DEFAULT.port
}

subprojects {
    group = 'jp.oist'
    version = getGitVersion()
    println "version = " + getGitVersion()
    ext.gitVersion = scmTag()
    ext.versionNamespace = 'abcvlib'
    ext.versionString = sprintf("%s%s", versionNamespace, version)

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'https://jitpack.io' }
        google()
        jcenter()
    }

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    if (gradle.ext.androidLibs.any{name -> name == project.name}){
        apply plugin: 'com.android.library'
        apply plugin: "kotlin-android" // needed for YuvToRgbConverter
    } else if (gradle.ext.apps.any{name -> name == project.name}){
        apply plugin: 'com.android.application'
        dependencies {
            implementation(project(":abcvlib"))
        }
    }

    dependencies {
        implementation 'androidx.annotation:annotation:1.2.0'
        implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
        implementation "androidx.lifecycle:lifecycle-livedata:2.3.1"
        implementation "androidx.lifecycle:lifecycle-viewmodel:2.3.1"
        implementation 'androidx.appcompat:appcompat:1.3.1'
        implementation 'androidx.activity:activity:1.3.1'
        implementation "androidx.fragment:fragment:1.3.6"
        implementation "androidx.core:core-ktx:1.6.0"
        implementation 'androidx.navigation:navigation-fragment:2.3.5'
        implementation 'androidx.navigation:navigation-ui:2.3.5'
        implementation 'org.tensorflow:tensorflow-lite-task-vision:0.4.0'
        implementation 'org.tensorflow:tensorflow-lite-gpu-delegate-plugin:0.4.0'
        implementation 'org.tensorflow:tensorflow-lite-gpu:2.9.0'


        // CameraX core library using the camera2 implementation
        implementation "androidx.camera:camera-camera2:1.1.0-alpha07"
        // If you want to additionally use the CameraX Lifecycle library
        implementation "androidx.camera:camera-lifecycle:1.1.0-alpha07"
        // If you want to additionally use the CameraX View class
        implementation "androidx.camera:camera-view:1.0.0-alpha27"
        // If you want to additionally use the CameraX Extensions library
        implementation "androidx.camera:camera-extensions:1.0.0-alpha27"

        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.5.21"
        implementation "com.google.flatbuffers:flatbuffers-java:1.12.0"
        implementation 'com.google.android.material:material:1.4.0'
        implementation 'com.google.zxing:core:3.4.1'
        implementation 'com.google.zxing:android-integration:3.3.0'
        implementation 'io.github.nishkarsh:android-permissions:2.0.54'

        implementation 'com.github.mik3y:usb-serial-for-android:3.6.0'
    }

    android{
        namespace 'jp.oist.abcvlib'
        compileOptions {
            sourceCompatibility(JavaVersion.VERSION_1_8)
            targetCompatibility(JavaVersion.VERSION_1_8)
        }
        defaultConfig {
            compileSdkVersion = 30
            buildToolsVersion = '30.0.2'
            minSdkVersion 24
            targetSdkVersion 30

            buildConfigField("String", "HOST", "\"${host.toString()}\"")
            buildConfigField("int", "PORT", "${port.toString()}")

            // Fetch the version according to git latest tag and "how far are we from last tag"
            def longVersionName = "git -C ${rootDir} describe --tags --long --dirty".execute().text.trim()
            def (fullVersionTag, commitCount, gitSha, dirty) = longVersionName.tokenize('-')
            def versionTagWithoutV = fullVersionTag.startsWith('v') ? fullVersionTag.substring(1) : fullVersionTag
            def(versionMajor, versionMinor, versionPatch) = versionTagWithoutV.tokenize('.')

            // Set the version name
            versionName = "$versionMajor.$versionMinor.$versionPatch-$commitCount-$dirty"

            // Turn the version name into a version code
            versionCode = versionMajor.toInteger() * 100000 +
                    versionMinor.toInteger() * 10000 +
                    versionPatch.toInteger() * 1000 +
                    commitCount.toInteger()

        }
        buildTypes{
            release{
                minifyEnabled true
            }
            debug {
                minifyEnabled false
            }
        }
        ndkVersion = "21.0.6113669"
    }
}

static def getGitVersion() {
    def longVersionName = "git describe --tags --long".execute().text.trim()
    def (fullVersionTag, commitCount, gitSha, dirty) = longVersionName.tokenize('-')
    // Release
    if (commitCount.toInteger() == 0) {
        return "$fullVersionTag"
    }
    // Quickfixes
    else{
        return "$longVersionName"
    }
}

static def scmTag() {
    def gitVersion = "$System.env.VERSION"
    if (gitVersion.equals("null")) {
        def processTag = "git describe --tags --dirty".execute()
        def processHash = "git rev-parse HEAD".execute()
        gitVersion = processTag.text.toString().trim() + "_" + processHash.text.toString().trim()
    } else {
        def gitVersionToken = gitVersion.split("/")
        if (gitVersionToken.size() > 2)
            gitVersion = gitVersionToken[2]
        else
            gitVersion = gitVersionToken[0]
    }
    return gitVersion
}

static def gitHash() {
    def processHash = "git rev-parse HEAD".execute()
    def gitHash = processHash.text.toString().trim()
    return gitHash
}

static def isDirty() {
    def dirtyString = "git describe --tags --dirty".execute().text.trim().tokenize("-")[-1]
    return dirtyString.equals("dirty")
}

static def isTagged() {
    def longVersionName = "git describe --tags --long".execute().text.trim()
    def (fullVersionTag, commitCount, gitSha, dirty) = longVersionName.tokenize('-')
    return commitCount.toInteger() == 0
}