buildscript {
    ext.kotlin_version = '1.5.20'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // needed for YuvToRgbConverter
    }
}

subprojects {
    group = 'jp.oist'
    version = "0.5.0"
    ext.gitVersion = scmTag()
    ext.versionNamespace = 'abcvlib'
    ext.versionString = sprintf("%s%s", versionNamespace, version)

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'https://jitpack.io' }
        google()
        jcenter()
    }

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    if (gradle.ext.androidLibs.any{name -> name == project.name}){
        apply plugin: 'com.android.library'
        apply plugin: "kotlin-android" // needed for YuvToRgbConverter
    } else if (gradle.ext.apps.any{name -> name == project.name}){
        apply plugin: 'com.android.application'
        dependencies {
            implementation(project(":abcvlib"))

            implementation 'com.google.code.gson:gson:2.8.6'

            implementation 'androidx.annotation:annotation:1.1.0'
            implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

            implementation "androidx.lifecycle:lifecycle-livedata:2.2.0"
            implementation "androidx.lifecycle:lifecycle-viewmodel:2.2.0"
        }
    }
    android{
        compileOptions {
            sourceCompatibility(JavaVersion.VERSION_1_8)
            targetCompatibility(JavaVersion.VERSION_1_8)
        }
        defaultConfig {
            compileSdkVersion = 30
            buildToolsVersion = '30.0.2'
            minSdkVersion 30
            targetSdkVersion 30

            // Fetch the version according to git latest tag and "how far are we from last tag"
            def longVersionName = "git -C ${rootDir} describe --tags --long --dirty".execute().text.trim()
            def (fullVersionTag, commitCount, gitSha, dirty) = longVersionName.tokenize('-')
            def(versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')

            // Set the version name
            versionName = "$versionMajor.$versionMinor.$versionPatch-$commitCount-$dirty"

            // Turn the version name into a version code
            versionCode = versionMajor.toInteger() * 100000 +
                    versionMinor.toInteger() * 10000 +
                    versionPatch.toInteger() * 1000 +
                    commitCount.toInteger()

        }
        ndkVersion = "21.0.6113669"
    }
}

static def scmTag() {
    def gitVersion = "$System.env.VERSION"
    if (gitVersion == "null") {
        def processTag = "git describe --tags --dirty".execute()
        def processHash = "git rev-parse HEAD".execute()
        gitVersion = processTag.text.toString().trim() + "_" + processHash.text.toString().trim()
    } else {
        def gitVersionToken = gitVersion.split("/")
        if (gitVersionToken.size() > 2)
            gitVersion = gitVersionToken[2]
        else
            gitVersion = gitVersionToken[0]
    }
    return gitVersion
}

static def gitHash() {
    def processHash = "git rev-parse HEAD".execute()
    def gitHash = processHash.text.toString().trim()
    return gitHash
}

static def isDirty() {
    def dirtyString = "git describe --tags --dirty".execute().text.trim().tokenize("-")[-1]
    return dirtyString.equals("dirty")
}