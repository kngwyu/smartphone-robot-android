buildscript {
    ext.kotlin_version = '1.4.31'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        mavenLocal() //Todo not sure if I need this
        maven { url 'https://jitpack.io' }
        google()
        jcenter()
    }
    configurations {
        all {
            exclude module: 'commons-logging'
        }
    }
}

subprojects {
    if (project.name != 'IOIOLibCore'){
        if (gradle.ext.androidLibs.any{name -> name == project.name}){
            apply plugin: 'com.android.library'
        } else if (gradle.ext.apps.any{name -> name == project.name}){
            apply plugin: 'com.android.application'
            dependencies {
                implementation(project(":abcvlib"))

                implementation 'com.google.code.gson:gson:2.8.6'

                implementation 'androidx.annotation:annotation:1.1.0'
                implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

                implementation "androidx.lifecycle:lifecycle-livedata:2.2.0"
                implementation "androidx.lifecycle:lifecycle-viewmodel:2.2.0"
            }
        }
        android{
            compileOptions {
                sourceCompatibility(JavaVersion.VERSION_1_8)
                targetCompatibility(JavaVersion.VERSION_1_8)
            }
            defaultConfig {
                compileSdkVersion = 30
                buildToolsVersion = '30.0.2'
                minSdkVersion 30
                targetSdkVersion 30
                versionCode = 1
                versionName = "1.0"
            }
            ndkVersion = "21.0.6113669"
        }
    }

}

static def scmTag() {
    def gitVersion = "$System.env.VERSION"
    if (gitVersion == "null") {
        def processTag = "git describe --tags --dirty".execute()
        def processHash = "git rev-parse HEAD".execute()
        gitVersion = processTag.text.toString().trim() + "_" + processHash.text.toString().trim()
    } else {
        def gitVersionToken = gitVersion.split("/")
        if (gitVersionToken.size() > 2)
            gitVersion = gitVersionToken[2]
        else
            gitVersion = gitVersionToken[0]
    }
    return gitVersion
}

static def gitHash() {
    def processHash = "git rev-parse HEAD".execute()
    def gitHash = processHash.text.toString().trim()
    return gitHash
}

task clean(type: Delete) {
    delete rootProject.buildDir
}